import asyncio

import aiohttp
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from termcolor import colored

from keyboards.default.signal_keyboard import *
from loader import dp, bot
from states.signal import Signal
from utils.misc.calculations import avg
from utils.misc.get_url import get_url

reverse_dict = {'Long': 'Short', "Short": 'Long'}


@dp.message_handler(Command('signal'))
async def signal_set(message: types.Message):
    await message.answer('–ö–∞–∫—É—é –∫—Ä–∏–ø—Ç—É —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å—Ç–∏—Ç—å?', reply_markup=crypto_name)
    await Signal.name.set()


@dp.message_handler(state=Signal.name)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.upper())
    price= await get_url(message.text)
    if price is not None:
        await state.update_data(price=price)
        await message.answer('Long –∏–ª–∏ Short –ø–æ–∑–∏—Ü–∏—è?', reply_markup=long_short)
        await Signal.short_long.set()
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π –ú–∏—à–∞, –≤—Å–µ —Ö...')
        await Signal.name.set()


@dp.message_handler(state=Signal.short_long)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer('–ö–∞–∫–æ–µ –ø–ª–µ—á–µ?', reply_markup=leverage)
    await Signal.leverage.set()


@dp.message_handler(state=Signal.leverage)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(leverage=message.text)
    states = await state.get_data()
    await message.answer('–ö–∞–∫–æ–π –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é?',
                         reply_markup=math_calc(reverse_dict[states.get('position')], states.get('price'), -0.02))
    await Signal.kit.set()


@dp.message_handler(state=Signal.kit)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(kit=message.text)
    states = await state.get_data()
    await message.answer('–ö–∞–∫–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∂–¥–∞—Ç—å?',
                         reply_markup=math_calc(states.get('position'), states.get('price'), -0.05))
    await Signal.goals.set()


@dp.message_handler(state=Signal.goals)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(goals=message.text)
    states = await state.get_data()
    await message.answer('–ö–∞–∫–æ–π —Å—Ç–æ–ø —Å—Ç–∞–≤–∏—Ç—å?',
                         reply_markup=math_calc(reverse_dict[states.get('position')], states.get('price'), -0.03))
    await Signal.stop.set()


@dp.message_handler(state=Signal.stop)
async def year(message: types.Message, state: FSMContext):
    await state.update_data(stop=message.text)
    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç?', reply_markup=comment_keyboard)
    await Signal.comment.set()


@dp.message_handler(state=Signal.comment)
async def comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    states = await state.get_data()
    tags = f'#{states.get("name")} #–°–ø–æ—Ç #–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏' if states.get('leverage') == '1' else \
        f"#{states.get('name')} {states.get('position').lower()} {states.get('leverage')} –ø–ª–µ—á–µ"
    kit = f'{states.get("kit")}'
    goals = avg(str(states.get('goals')), states.get('position'))
    stops = f"{states.get('stop')}"
    comments = ''if states.get('comment') == '-' else f'–ö–æ–º–º–µ–Ω—Ç: {states.get("comment")}\n\n'
    await message.answer("–ü–æ—Å—Ç–∏—Ç—å —ç—Ç–æ???")
    final_result = (f'{tags}\n\n'
                         f'<b>üí∏–° –∫–∞–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –±—Ä–∞—Ç—å:</b> {kit}\n\n'
                         f'<b>üìà–¶–µ–ª–∏:</b> <tg-spoiler>{goals[0]}</tg-spoiler>\n\n'
                         f'<b>üíµ–°—Ä–µ–¥–Ω—è—è:</b> {goals[1]}\n\n{comments}'
                         f'<b>üö´–°—Ç–æ–ø:</b> {stops}üö´')
    await message.answer(final_result, reply_markup=post_or_not_key)
    await Signal.check.set()


@dp.message_handler(state=Signal.check)
async def post_or_not(message: types.Message, state: FSMContext):
    states = await state.get_data()
    tags = f'#{states.get("name")} #–°–ø–æ—Ç #–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏' if states.get('leverage') == '1' else \
        f"#{states.get('name')} {states.get('position').lower()} {states.get('leverage')} –ø–ª–µ—á–µ"
    kit = f'{states.get("kit")}'
    goals = avg(str(states.get('goals')), states.get('position'))
    stops = f"{states.get('stop')}"
    comments = ''if states.get('comment') == '-' else f'–ö–æ–º–º–µ–Ω—Ç: {states.get("comment")}\n\n'
    final_result = (f'{tags}\n\n'
                         f'<b>üí∏–° –∫–∞–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –±—Ä–∞—Ç—å:</b> {kit}\n\n'
                         f'<b>üìà–¶–µ–ª–∏:</b> <tg-spoiler>{goals[0]}</tg-spoiler>\n\n'
                         f'<b>üíµ–°—Ä–µ–¥–Ω—è—è:</b> {goals[1]}\n\n{comments}'
                         f'<b>üö´–°—Ç–æ–ø:</b> {stops}üö´')
    if message.text == '–ù–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞':
        await state.finish()
        await bot.send_message(chat_id=-1001128738537, text=final_result)
    elif message.text == '–ù–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª':
        await state.finish()
        await message.answer('–ü–æ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª', reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(chat_id=-1001128738537, text=final_result)
    else:
        await state.finish()
        await message.answer('–≠—Ç–æ –ø–æ—Å—Ç–∏—Ç—å –º—ã –Ω–µ –±—É–¥–µ–º ü§óü§óü§ó', reply_markup=types.ReplyKeyboardRemove())
