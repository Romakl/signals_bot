from nis import cat
from typing import Union

import payment as payment
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart, Command
from aiogram.types import CallbackQuery, ContentTypes, ContentType

from data.config import PROVIDER_TOKEN
from data.items import Tariff_3, Tariff_1, Tariff_2, Tariff_4
from keyboards.inline.inline_menu import *
from loader import dp, bot
from aiogram.utils.markdown import hlink

from utils.db_api.quick_commands import add_user


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await list_cat(message)


async def list_cat(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await cat_keyboard()
    caption = '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ\n\n' \
              '–ê —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –º—ã —á–∞—Å—Ç–æ –ø–æ—Å—Ç–∏–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n' \
              f"{hlink('–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª', 'https://t.me/RichWhale_official')}\n" \
              f"{hlink('Twitter', 'https://twitter.com/Mr_RichWhale')}\n" \
              f"{hlink('TikTok', 'https://vm.tiktok.com/ZML1Jr82F/')}\n"
    if isinstance(message, types.Message):
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!')
        await message.answer_photo(photo='https://memepedia.ru/wp-content/uploads/2019/06/stonks-template-768x576.png',
                                   caption=caption, reply_markup=markup)
        # link = await bot.create_chat_invite_link(chat_id=-1001128738537, member_limit=1)
        # await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n\n"
        #                      f"{link.invite_link}")
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_caption(caption)
        await call.message.edit_reply_markup(markup)


async def list_subcat(call: CallbackQuery, cat, **kwargs):
    markup = await subcat_keyboard(cat)
    if cat == 'price':
        await call.message.edit_caption(
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ:\n\n50$ - 1 –º–µ—Å—è—Ü\n130$ - 3 –º–µ—Å—è—Ü–∞\n250$ - '
            '6 –º–µ—Å—è—Ü–µ–≤\n450$- –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ')
        await call.message.edit_reply_markup(reply_markup=markup)
    if cat == 'why':
        await call.message.edit_caption("–£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –ø—Ä–æ <b>{}</b>. –õ–∏—á–Ω–æ –æ—Ç —Å–µ–±—è –¥–æ–±–∞–≤–ª—é (–Ø "
                                        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, "
                                        "–∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) —Å–∫–∞–∂—É —á—Ç–æ –∫–ª—É–± —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∏–π(–ú–Ω–µ –∑–∞ —ç—Ç–∏ —Å–ª–æ–≤–∞ –Ω–µ "
                                        "–ø–ª–∞—Ç–∏–ª–∏). –ö–æ–Ω–µ—á–Ω–æ –∂–µ –ö—ç–ø –Ω–µ –≥—É—Ä—É –∏ –Ω–µ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –±—É–¥—É—Ç —É—Å–ø–µ—à–Ω—ã–º–∏, –Ω–æ –æ–Ω —Ç–æ—á–Ω–æ "
                                        "–ø—Ä–æ—Ñ–∏ –≤ —Å–≤–æ–µ–π —Å—Ñ–µ—Ä–µ, –ø–æ –º–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ <b>–≥–¥–µ —Ç–æ 70-80% —Å–¥–µ–ª–æ–∫ –¥–∞—é—Ç "
                                        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç</b> –∏ "
                                        "–≥—Ä–∞–º–æ—Ç–Ω—ã–µ —Å—Ç–æ–ø—ã –æ—Ç –ö—ç–ø–∞ —Å–ø–∞—Å–∞—é—Ç –¥–∞–∂–µ —Å–∞–º—É—é –ø–ª–æ—Ö—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –¢–∞–∫ –∂–µ —è –ª–∏—á–Ω–æ "
                                        "–ø–æ–¥–º–µ—Ç–∏–ª –æ—á–µ–Ω—å –ª–∞–º–ø–æ–≤–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–æ–≤–∏—á–∫–∞–º, –¥–∞—ë—Ç —Å–æ–≤–µ—Ç—ã –ø–æ "
                                        "—Ä–∞–∑–Ω—ã–º –≤–∞–ª—é—Ç–∞–º –∏ –ø–æ—Å—Ç–∏—Ç –º–µ–º—ã)".format(
            hlink("–ö–ª—É–±", 'https://t.me/Otzivy_RichWhale')))
        await call.message.edit_reply_markup(reply_markup=markup)
    if cat == 'buy':
        await choose_sub(call)

    if cat == 'knowledge':
        link_dict = {"–ß—Ç–æ —Ç–∞–∫–æ–µ Binance?": "https://youtu.be/5ni649349L4",
                     "–ß—Ç–æ —Ç–∞–∫–æ–µ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?": "https://youtu.be/jl87i65MD9I",
                     "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä?": "https://youtu.be/BJIZI-8KtBM",
                     "–ß—Ç–æ —Ç–∞–∫–æ–µ –û–°–û –æ—Ä–¥–µ—Ä?": "https://youtu.be/VzxgT4LXm28",
                     "–õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞?": "https://youtu.be/CE2QfmaJCiw",
                     "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã": "https://youtu.be/BDIBo4HBbMQ",
                     "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è?": "https://youtu.be/AC6koBc9rcg",
                     "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—å—é—á–µ—Ä—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è?": "https://youtu.be/lwHArSK9KCY"}
        kek = '\n'.join([hlink(i, link_dict[i]) for i in link_dict])
        await call.message.edit_caption('–£ –Ω–∞—Å –¥–æ–≤–æ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –∏ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∏ —Ç–∞–∫ –∏ '
                                        '–ø—Ä–æ—Ñ–∏ —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã. –ù–æ —Ö–æ—Ä–æ—à–∏–º —Ç–æ–Ω–æ–º –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑–æ–≤—ã–µ '
                                        f'–æ—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –æ—Ç –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥:\n{kek}')
        await call.message.edit_reply_markup(reply_markup=markup)


async def choose_sub(call: CallbackQuery, **kwargs):
    await call.message.edit_caption('–£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã:')
    await call.message.edit_reply_markup(reply_markup=await subscribe_keyboard())


async def pay_method(call: CallbackQuery, tariff, **kwargs):
    await call.message.edit_caption('–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –Ω–∞:')
    await call.message.edit_reply_markup(reply_markup=await pay_method_keyboard(tariff))


async def final_result(call: CallbackQuery, tariff, pay, **kwargs):
    if pay == 'crypto_wallet':
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É —Å –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–æ–º, –ø–æ —ç—Ç–æ–º—É –Ω—É–∂–Ω–æ '
                                  '—Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤—Ä—É—á–Ω—É—é üò≠.\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ —Å—É–º–º—É –≤ USDT –∏ '
                                  '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å –∫–æ—Ç—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ '
                                  '@Your_Kapitan –æ–± –æ–ø–ª–∞—Ç–µ –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –≤—ã –Ω–µ '
                                  '–∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –¥–µ–Ω—å–≥–∏ –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
        await call.message.answer('TBPXo9LEW4vbtAsyyMENDHvihcvfmNnBKo')
        await bot.send_video(call.from_user.id, video=open('photos/telegram-cloud-document-2-5411617531209192699.mp4',
                                                           'rb'), caption='–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤ 1$')
    tariff_dict = {'1': Tariff_1.generate_invoice(), '2': Tariff_2.generate_invoice(),
                   '3': Tariff_3.generate_invoice(), '4': Tariff_4.generate_invoice()}
    pay_dict = {'sber': PROVIDER_TOKEN, 'mono': PROVIDER_TOKEN, 'privat': PROVIDER_TOKEN}
    await bot.send_invoice(chat_id=call.from_user.id, **tariff_dict[tariff],
                           provider_token=pay_dict[pay], payload="first_tariff")


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    print('order_info')
    print(pre_checkout_query.order_info)
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    await message.answer('–£—Ä–∞! –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É `{total_amount} {currency}` —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'.format(total_amount=message.successful_payment.total_amount // 100,
                                                             currency=message.successful_payment.currency))
    order_tariff = message.successful_payment.total_amount
    tariff_dict =  {50: 30, 130: 61, 250: 183, 450: None}
    id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    import datetime
    tod = datetime.datetime.now()
    d = lambda x: datetime.timedelta(days=x)
    liquidation_day = tod + d(tariff_dict[order_tariff])
    print(message.successful_payment.order_info)
    await add_user(id=id, username=username, full_name=full_name, liquidation_day=liquidation_day)


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    level = callback_data.get('level')
    cat = callback_data.get('cat')
    subcat = callback_data.get('subcat')
    tariff = callback_data.get('tariff')
    pay = callback_data.get('pay')
    levels = {
        '0': list_cat,
        '1': list_subcat,
        '2': choose_sub,
        '3': pay_method,
        '4': final_result

    }
    current_level = levels[level]

    await current_level(call, cat=cat, subcat=subcat, tariff=tariff, pay=pay)
